var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import { GraphinContext } from '@antv/graphin';
import React from 'react';
var defaultHullCfg = {
  members: [],
  type: 'round-convex',
  nonMembers: [],
  style: {
    fill: 'lightblue',
    stroke: 'blue',
    opacity: 0.2
  },
  padding: 10
};
/**
 * deep merge hull config
 * @param defaultCfg
 * @param cfg
 */

var deepMergeCfg = function deepMergeCfg(defaultCfg, cfg) {
  var _defaultCfg$style = defaultCfg.style,
      DefaultCfg = _defaultCfg$style === void 0 ? {} : _defaultCfg$style,
      defaultOtherCfg = __rest(defaultCfg, ["style"]);

  var _cfg$style = cfg.style,
      style = _cfg$style === void 0 ? {} : _cfg$style,
      others = __rest(cfg, ["style"]);

  return Object.assign(Object.assign(Object.assign({}, defaultOtherCfg), others), {
    style: Object.assign(Object.assign({}, DefaultCfg), style)
  });
}; // eslint-disable-next-line @typescript-eslint/no-explicit-any


var hullInstances;

var Hull = function Hull(props) {
  var graphin = React.useContext(GraphinContext);
  var graph = graphin.graph;
  React.useEffect(function () {
    var options = props.options;
    hullInstances = options.map(function (item) {
      return graph.createHull( // @ts-ignore
      deepMergeCfg(defaultHullCfg, Object.assign({
        id: "".concat(Math.random())
      }, item)));
    });

    var handleAfterUpdateItem = function handleAfterUpdateItem() {
      hullInstances.forEach(function (item) {
        item.updateData(item.members);
      });
    };

    graph.on('afterupdateitem', handleAfterUpdateItem);
    return function () {
      graph.on('afterupdateitem', handleAfterUpdateItem);
    };
  }, [graph]);
  return React.createElement("div", {
    className: "graphin-hull-container"
  });
};

export default Hull;