import * as Graphin from '@antv/graphin';
import isArray from '@antv/util/esm/is-array';
import React from 'react';
import "./index.css";
var GraphinContext = Graphin.GraphinContext;
var defaultStyle = {
  background: '#fff'
};

var ToolbarItem = function ToolbarItem(props) {
  var children = props.children,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? function () {} : _props$onClick;
  return (// eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    React.createElement("li", {
      onClick: onClick,
      onKeyDown: onClick
    }, children)
  );
};

var Toolbar = function Toolbar(props) {
  var children = props.children,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'horizontal' : _props$direction,
      options = props.options,
      onChange = props.onChange;
  var graphin = React.useContext(GraphinContext);
  var isHorizontal = direction === 'horizontal';
  var positionStyle = {
    position: 'absolute'
  }; // 水平方向，默认在右上角

  if (isHorizontal) {
    positionStyle.right = 0;
    positionStyle.top = 0;
  } else {
    // 垂直方向，默认在左下角
    positionStyle.left = 0;
    positionStyle.bottom = 0;
  }

  var handleClick = function handleClick(option) {
    try {
      if (onChange) {
        onChange(graphin, option);
      }
    } catch (error) {
      console.log(error);
    }
  };

  if (options) {
    return React.createElement("div", {
      className: "graphin-components-toolbar",
      style: Object.assign(Object.assign(Object.assign({}, defaultStyle), positionStyle), style)
    }, React.createElement("ul", {
      className: "graphin-components-toolbar-content",
      style: {
        display: isHorizontal ? 'flex' : ''
      }
    }, options.map(function (option) {
      var key = option.key,
          name = option.name;
      return React.createElement(ToolbarItem, {
        key: key || name,
        onClick: function onClick() {
          handleClick(option);
        }
      }, name);
    })));
  }

  return React.createElement("div", {
    style: Object.assign(Object.assign(Object.assign({}, defaultStyle), positionStyle), style),
    className: "graphin-components-toolbar"
  }, isArray(children) || children && children.type === ToolbarItem ? React.createElement("ul", {
    className: "graphin-components-toolbar-content",
    style: {
      display: isHorizontal ? 'flex' : ''
    }
  }, children) : children);
};

Toolbar.Item = ToolbarItem;
export default Toolbar;