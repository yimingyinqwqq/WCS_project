/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable jsx-a11y/click-events-have-key-events */
import { GraphinContext } from '@antv/graphin';
import React from 'react';
import "./index.css";

var Item = function Item(props) {
  var children = props.children,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? function () {} : _props$onClick;
  var graphin = React.useContext(GraphinContext);

  var handleClose = function handleClose() {
    onClick();
    var contextmenu = graphin.contextmenu; // 临时方案

    if (contextmenu.node) {
      contextmenu.node.handleClose();
    }

    if (contextmenu.edge) {
      contextmenu.edge.handleClose();
    }

    if (contextmenu.canvas) {
      contextmenu.canvas.handleClose();
    }
  }; // eslint-disable-next-line jsx-a11y/click-events-have-key-events
  // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions


  return React.createElement("li", {
    onClick: handleClose
  }, children);
};

var Menu = function Menu(props) {
  var _props$bindType = props.bindType,
      bindType = _props$bindType === void 0 ? 'node' : _props$bindType;
  var graphin = React.useContext(GraphinContext);
  var options = props.options,
      onChange = props.onChange;

  var handleClick = function handleClick(e) {
    try {
      var contextmenu = graphin.contextmenu;
      var item = null;

      if (bindType === 'node') {
        item = contextmenu.node.item.getModel();
      }

      if (bindType === 'edge') {
        item = contextmenu.edge.item.getModel();
      }

      if (bindType === 'canvas') {
        item = null;
      }

      if (onChange) {
        onChange(e, item);
        contextmenu[bindType].handleClose();
      }
    } catch (error) {
      console.log(error);
    }
  };

  var children = props.children;

  if (options) {
    return React.createElement("ul", {
      className: "graphin-components-contextmenu-content"
    }, options.map(function (c) {
      var key = c.key,
          icon = c.icon,
          name = c.name;
      return React.createElement(Item, {
        key: key || name,
        onClick: function onClick() {
          handleClick(c);
        }
      }, icon, " ", name);
    }));
  }

  return React.createElement("ul", {
    className: "graphin-components-contextmenu-content"
  }, children);
};

Menu.Item = Item;
export default Menu;