"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var Graphin = _interopRequireWildcard(require("@antv/graphin"));

var _isArray = _interopRequireDefault(require("@antv/util/esm/is-array"));

var _react = _interopRequireDefault(require("react"));

require("./index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var GraphinContext = Graphin.GraphinContext;
var defaultStyle = {
  background: '#fff'
};

var ToolbarItem = function ToolbarItem(props) {
  var children = props.children,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? function () {} : _props$onClick;
  return (// eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    _react.default.createElement("li", {
      onClick: onClick,
      onKeyDown: onClick
    }, children)
  );
};

var Toolbar = function Toolbar(props) {
  var children = props.children,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'horizontal' : _props$direction,
      options = props.options,
      onChange = props.onChange;

  var graphin = _react.default.useContext(GraphinContext);

  var isHorizontal = direction === 'horizontal';
  var positionStyle = {
    position: 'absolute'
  }; // 水平方向，默认在右上角

  if (isHorizontal) {
    positionStyle.right = 0;
    positionStyle.top = 0;
  } else {
    // 垂直方向，默认在左下角
    positionStyle.left = 0;
    positionStyle.bottom = 0;
  }

  var handleClick = function handleClick(option) {
    try {
      if (onChange) {
        onChange(graphin, option);
      }
    } catch (error) {
      console.log(error);
    }
  };

  if (options) {
    return _react.default.createElement("div", {
      className: "graphin-components-toolbar",
      style: Object.assign(Object.assign(Object.assign({}, defaultStyle), positionStyle), style)
    }, _react.default.createElement("ul", {
      className: "graphin-components-toolbar-content",
      style: {
        display: isHorizontal ? 'flex' : ''
      }
    }, options.map(function (option) {
      var key = option.key,
          name = option.name;
      return _react.default.createElement(ToolbarItem, {
        key: key || name,
        onClick: function onClick() {
          handleClick(option);
        }
      }, name);
    })));
  }

  return _react.default.createElement("div", {
    style: Object.assign(Object.assign(Object.assign({}, defaultStyle), positionStyle), style),
    className: "graphin-components-toolbar"
  }, (0, _isArray.default)(children) || children && children.type === ToolbarItem ? _react.default.createElement("ul", {
    className: "graphin-components-toolbar-content",
    style: {
      display: isHorizontal ? 'flex' : ''
    }
  }, children) : children);
};

Toolbar.Item = ToolbarItem;
var _default = Toolbar;
exports.default = _default;