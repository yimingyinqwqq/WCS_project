"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _graphin = require("@antv/graphin");

var _react = _interopRequireWildcard(require("react"));

var _Edge = _interopRequireDefault(require("./Edge"));

var _Node = _interopRequireDefault(require("./Node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var defaultStyle = {
  width: 200,
  background: '#fff'
};

var getTranslate = function getTranslate(_ref) {
  var placement = _ref.placement,
      nodeSize = _ref.nodeSize,
      x = _ref.x,
      y = _ref.y,
      _ref$bindType = _ref.bindType,
      bindType = _ref$bindType === void 0 ? 'node' : _ref$bindType,
      visible = _ref.visible;

  if (bindType === 'edge') {
    return {
      left: x,
      top: y
    };
  }

  if (placement === 'top') {
    if (visible) {
      return {
        left: x,
        top: y - nodeSize / 2,
        opacity: 1,
        transform: 'translate(-50%,calc(-100% - 6px))',
        transition: 'opacity 0.5s,transform 0.5s'
      };
    }

    return {
      left: 0,
      top: 0,
      opacity: 0.5,
      transform: 'translate(-50%,-100%)'
    };
  }

  if (placement === 'bottom') {
    if (visible) {
      return {
        left: x,
        top: y + nodeSize / 2,
        opacity: 1,
        transform: 'translate(-50%,6px)',
        transition: 'opacity 0.5s,transform 0.5s'
      };
    }

    return {
      left: x,
      top: y + nodeSize / 2,
      opacity: 0.5,
      transform: 'translate(-50%,0px)'
    };
  }

  if (placement === 'left') {
    if (visible) {
      return {
        left: x - nodeSize / 2,
        top: y,
        transform: 'translate(calc(-100% - 6px),-50%)',
        opacity: 1,
        transition: 'opacity 0.5s,transform 0.5s'
      };
    }

    return {
      opacity: 0,
      left: x - nodeSize / 2,
      top: y,
      transform: 'translate(-100%,-50%)'
    };
  }

  if (placement === 'right') {
    if (visible) {
      return {
        left: x + nodeSize / 2,
        top: y,
        transform: 'translate(6px,-50%)',
        opacity: 1,
        transition: 'opacity 0.5s,transform 0.5s'
      };
    }

    return {
      left: x + nodeSize / 2,
      top: y,
      transform: 'translate(0,-50%)',
      opacity: 0
    };
  }

  if (placement === 'center') {
    if (visible) {
      return {
        left: x,
        top: y,
        opacity: 1,
        transition: 'opacity 0.5s,transform 0.5s'
      };
    }

    return {
      left: x,
      top: y,
      opacity: 0
    };
  }

  return {
    left: x,
    top: y
  };
}; // let containerRef: HTMLDivElement | null;


var Tooltip = function Tooltip(props) {
  var children = props.children,
      _props$bindType = props.bindType,
      bindType = _props$bindType === void 0 ? 'node' : _props$bindType,
      style = props.style,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'top' : _props$placement,
      hasArrow = props.hasArrow;

  var graphin = _react.default.useContext(_graphin.GraphinContext);

  var graph = graphin.graph;

  var _React$useState = _react.default.useState({
    visible: false,
    x: 0,
    y: 0,
    item: null
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  var handleShow = function handleShow(e) {
    e.preventDefault();
    e.stopPropagation();
    var point = graph.getPointByClient(e.clientX, e.clientY);

    var _graph$getCanvasByPoi = graph.getCanvasByPoint(point.x, point.y),
        x = _graph$getCanvasByPoi.x,
        y = _graph$getCanvasByPoi.y;

    if (bindType === 'node') {
      // 如果是节点，则x，y指定到节点的中心点
      // eslint-disable-next-line no-underscore-dangle
      if (e.item) {
        var _e$item$getModel = e.item.getModel(),
            _e$item$getModel$x = _e$item$getModel.x,
            PointX = _e$item$getModel$x === void 0 ? 0 : _e$item$getModel$x,
            _e$item$getModel$y = _e$item$getModel.y,
            PointY = _e$item$getModel$y === void 0 ? 0 : _e$item$getModel$y;

        var CenterCanvas = graph.getCanvasByPoint(PointX, PointY);
        var daltX = e.canvasX - CenterCanvas.x;
        var daltY = e.canvasY - CenterCanvas.y;
        x = x - daltX;
        y = y - daltY;
      }
    }
    /** 设置变量 */


    setState(function (preState) {
      return Object.assign(Object.assign({}, preState), {
        visible: true,
        item: e.item,
        x: x,
        y: y
      });
    });
  };

  var handleClose = function handleClose() {
    setState(function (preState) {
      return Object.assign(Object.assign({}, preState), {
        visible: false,
        item: null,
        x: 0,
        y: 0
      });
    });
  };

  var handleDragStart = function handleDragStart() {
    setState(Object.assign(Object.assign({}, state), {
      visible: false,
      x: 0,
      y: 0,
      item: null
    }));
  };

  var handleDragEnd = function handleDragEnd(e) {
    var point = graph.getPointByClient(e.clientX, e.clientY);

    var _graph$getCanvasByPoi2 = graph.getCanvasByPoint(point.x, point.y),
        x = _graph$getCanvasByPoi2.x,
        y = _graph$getCanvasByPoi2.y;

    if (bindType === 'node') {
      // 如果是节点，则x，y指定到节点的中心点
      // eslint-disable-next-line no-underscore-dangle
      if (e.item) {
        var _e$item$getModel2 = e.item.getModel(),
            _e$item$getModel2$x = _e$item$getModel2.x,
            PointX = _e$item$getModel2$x === void 0 ? 0 : _e$item$getModel2$x,
            _e$item$getModel2$y = _e$item$getModel2.y,
            PointY = _e$item$getModel2$y === void 0 ? 0 : _e$item$getModel2$y;

        var CenterCanvas = graph.getCanvasByPoint(PointX, PointY);
        var daltX = e.canvasX - CenterCanvas.x;
        var daltY = e.canvasY - CenterCanvas.y;
        x = x - daltX;
        y = y - daltY;
      }

      setState(Object.assign(Object.assign({}, state), {
        visible: true,
        x: x,
        y: y,
        item: e.item
      }));
    }
  };

  (0, _react.useEffect)(function () {
    graph.on("".concat(bindType, ":mouseenter"), handleShow);
    graph.on("".concat(bindType, ":mouseleave"), handleClose);
    graph.on("afterremoveitem", handleClose);
    graph.on("node:dragstart", handleDragStart);
    graph.on("node:dragend", handleDragEnd); // graph.on(`${bindType}:mousemove`, handleUpdatePosition);

    return function () {
      graph.off("".concat(bindType, ":mouseenter"), handleShow);
      graph.off("".concat(bindType, ":mouseleave"), handleClose);
      graph.off("afterremoveitem", handleClose);
      graph.off("node:dragstart", handleDragStart);
      graph.off("node:dragend", handleDragEnd); // graph.off(`${bindType}:mousemove`, handleUpdatePosition);
    };
  }, []);
  var x = state.x,
      y = state.y,
      visible = state.visible,
      item = state.item;
  var nodeSize = 40;

  try {
    var modelStyle = item === null || item === void 0 ? void 0 : item.getModel().style;

    if (modelStyle) {
      nodeSize = modelStyle.keyshape.size;
    }
  } catch (error) {
    console.log(error);
  }

  var padding = 12;
  var containerPosition = getTranslate({
    placement: placement,
    nodeSize: nodeSize + padding,
    x: x,
    y: y,
    bindType: bindType,
    visible: visible
  });
  var positionStyle = Object.assign({
    position: 'absolute'
  }, containerPosition);
  /** 将一些方法和数据传递给子组件 */

  graphin.tooltip = Object.assign(Object.assign({}, graphin.tooltip), _defineProperty({}, bindType, {
    handleOpen: handleShow,
    handleClose: handleClose,
    item: item,
    visible: visible,
    x: x,
    y: y
  }));
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", {
    ref: function ref() {// containerRef = node;
    },
    className: "graphin-components-tooltip ".concat(placement),
    style: Object.assign(Object.assign(Object.assign({}, defaultStyle), style), positionStyle)
  }, visible && _react.default.createElement("div", null, hasArrow && _react.default.createElement("div", {
    className: "tooltip-arrow ".concat(placement)
  }), children)));
};

Tooltip.Edge = _Edge.default;
Tooltip.Node = _Node.default;
var _default = Tooltip;
exports.default = _default;