"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _graphin = require("@antv/graphin");

var _react = _interopRequireDefault(require("react"));

var _Node = _interopRequireDefault(require("./Node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var getEnumValue = function getEnumValue(keyString, data) {
  var keyArray = keyString.split('.');
  var enumValue = keyArray.reduce(function (acc, curr) {
    return acc[curr] || {};
  }, data);

  if (_typeof(enumValue) === 'object') {
    return 'others';
  }

  return enumValue;
};

var calculate = function calculate(_ref) {
  var bindType = _ref.bindType,
      sortKey = _ref.sortKey,
      graph = _ref.graph,
      colorKey = _ref.colorKey;
  var data = graph.save();
  var treeData = data;
  var graphData = data;
  var nodeMapByMapKey = new Map();
  var edgeMapByMapKey = new Map();
  /** 暂时不支持treeGraph的legend */

  if (treeData.children) {
    console.error('not support tree graph');
    return {
      dataMap: new Map(),
      options: {}
    };
  }

  var _graphData$nodes = graphData.nodes,
      nodes = _graphData$nodes === void 0 ? [] : _graphData$nodes,
      _graphData$edges = graphData.edges,
      edges = _graphData$edges === void 0 ? [] : _graphData$edges;

  if (bindType === 'node') {
    nodes.forEach(function (node) {
      /** 得到枚举值 */
      var enumValue = getEnumValue(sortKey, node);
      /** 按照枚举值重新将节点存放 */

      var current = nodeMapByMapKey.get(enumValue);

      if (current) {
        nodeMapByMapKey.set(enumValue, [].concat(_toConsumableArray(current), [node]));
      } else {
        nodeMapByMapKey.set(enumValue, [node]);
      }
    });
    /** 计算legend.content 的 options */

    var _keys = _toConsumableArray(nodeMapByMapKey.keys());

    var _options = _keys.map(function (key) {
      var node = (nodeMapByMapKey.get(key) || [{}])[0];
      var color = getEnumValue(colorKey, node);
      return {
        /** 颜色 */
        color: color,

        /** 值 */
        value: key,

        /** 标签 */
        label: key,

        /** 是否选中 */
        checked: true
      };
    });

    return {
      dataMap: nodeMapByMapKey,
      options: _options
    };
  } // if (bindType === 'edge') {


  edges.forEach(function (edge) {
    /** 得到枚举值 */
    var enumValue = getEnumValue(sortKey, edge);
    var current = edgeMapByMapKey.get(enumValue);

    if (current) {
      edgeMapByMapKey.set(enumValue, [].concat(_toConsumableArray(current), [edge]));
    } else {
      edgeMapByMapKey.set(enumValue, [edge]);
    }
  });
  /** 计算legend.content 的 options */

  var keys = _toConsumableArray(edgeMapByMapKey.keys());

  var options = keys.map(function (key) {
    var edge = (edgeMapByMapKey.get(key) || [{}])[0];
    var color = getEnumValue(colorKey, edge);
    return {
      /** 颜色 */
      color: color,

      /** 值 */
      value: key,

      /** 标签 */
      label: key,

      /** 是否选中 */
      checked: true
    };
  });
  return {
    dataMap: edgeMapByMapKey,
    options: options
  };
};

var defaultStyle = {
  position: 'absolute',
  top: '0px',
  right: '0px'
};

var Legend = function Legend(props) {
  var graphin = _react.default.useContext(_graphin.GraphinContext);

  var graph = graphin.graph;
  var bindType = props.bindType,
      sortKey = props.sortKey,
      children = props.children,
      _props$colorKey = props.colorKey,
      colorKey = _props$colorKey === void 0 ? 'style.stroke' : _props$colorKey,
      style = props.style;

  var _calculate = calculate({
    bindType: bindType,
    sortKey: sortKey,
    graph: graph,
    colorKey: colorKey
  }),
      dataMap = _calculate.dataMap,
      options = _calculate.options;

  graphin.legend = Object.assign(Object.assign({}, graphin.legend), _defineProperty({}, bindType, {
    bindType: bindType,
    sortKey: sortKey,
    colorKey: colorKey,
    dataMap: dataMap,
    options: options
  }));
  return _react.default.createElement("div", {
    className: "graphin-components-legend",
    style: Object.assign(Object.assign({}, defaultStyle), style)
  }, children);
};

Legend.Node = _Node.default;
var _default = Legend;
exports.default = _default;