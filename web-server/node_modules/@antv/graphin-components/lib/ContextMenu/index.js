"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var Graphin = _interopRequireWildcard(require("@antv/graphin"));

var _Menu = _interopRequireDefault(require("./Menu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var GraphinContext = Graphin.GraphinContext;
var defaultStyle = {
  width: 200,
  background: '#fff'
};
var containerRef;

var ContextMenu = function ContextMenu(props) {
  var children = props.children,
      _props$bindType = props.bindType,
      bindType = _props$bindType === void 0 ? 'node' : _props$bindType,
      style = props.style;

  var graphin = _react.default.useContext(GraphinContext);

  var graph = graphin.graph;

  var _React$useState = _react.default.useState({
    visible: false,
    x: 0,
    y: 0,
    item: null
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  var handleShow = function handleShow(e) {
    e.preventDefault();
    e.stopPropagation();
    var width = graph.get('width');
    var height = graph.get('height');
    var bbox = containerRef.getBoundingClientRect();
    var offsetX = graph.get('offsetX') || 0;
    var offsetY = graph.get('offsetY') || 0;
    var graphTop = graph.getContainer().offsetTop;
    var graphLeft = graph.getContainer().offsetLeft;
    var x = e.canvasX + graphLeft + offsetX;
    var y = e.canvasY + graphTop + offsetY; // when the menu is (part of) out of the canvas

    if (x + bbox.width > width) {
      x = e.canvasX - bbox.width - offsetX + graphLeft;
    }

    if (y + bbox.height > height) {
      y = e.canvasY - bbox.height - offsetY + graphTop;
    }

    if (bindType === 'node') {
      // 如果是节点，则x，y指定到节点的中心点
      // eslint-disable-next-line no-underscore-dangle
      var _ref = e.item && e.item.getModel(),
          PointX = _ref.x,
          PointY = _ref.y;

      var CenterCanvas = graph.getCanvasByPoint(PointX, PointY);
      var daltX = e.canvasX - CenterCanvas.x;
      var daltY = e.canvasY - CenterCanvas.y;
      x = x - daltX;
      y = y - daltY;
    }
    /** 设置变量 */


    setState(function (preState) {
      return Object.assign(Object.assign({}, preState), {
        visible: true,
        x: x,
        y: y,
        item: e.item
      });
    });
  };

  var handleClose = function handleClose() {
    setState(function (preState) {
      if (preState.visible) {
        return Object.assign(Object.assign({}, preState), {
          visible: false,
          x: 0,
          y: 0
        });
      }

      return preState;
    });
  };

  (0, _react.useEffect)(function () {
    // @ts-ignore
    graph.on("".concat(bindType, ":contextmenu"), handleShow);
    graph.on('canvas:click', handleClose);
    graph.on('canvas:drag', handleClose);
    graph.on('wheelzoom', handleClose);
    return function () {
      graph.off("".concat(bindType, ":contextmenu"), handleShow);
      graph.off('canvas:click', handleClose);
      graph.off('canvas:drag', handleClose);
      graph.off('wheelzoom', handleClose);
    };
  }, []);
  var x = state.x,
      y = state.y,
      visible = state.visible,
      item = state.item;
  var positionStyle = {
    position: 'absolute',
    left: x,
    top: y
  };
  /** 将一些方法和数据传递给子组件 */

  graphin.contextmenu = Object.assign(Object.assign({}, graphin.contextmenu), _defineProperty({}, bindType, {
    handleOpen: handleShow,
    handleClose: handleClose,
    item: item,
    visible: visible,
    x: x,
    y: y,
    bindType: bindType
  }));
  var id = item && !item.destroyed && item.getModel && item.getModel().id || '';
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", {
    ref: function ref(node) {
      containerRef = node;
    },
    className: "graphin-components-contextmenu",
    style: Object.assign(Object.assign(Object.assign({}, defaultStyle), style), positionStyle),
    key: id
  }, visible && children));
};

ContextMenu.Menu = _Menu.default;
var _default = ContextMenu;
exports.default = _default;