function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useEffect, useRef } from 'react';
import { GraphinContext } from '../../index'; //let timer.current: number | undefined;

var useTooltip = function useTooltip(props) {
  var _props$bindType = props.bindType,
      bindType = _props$bindType === void 0 ? 'node' : _props$bindType,
      container = props.container;
  var graphin = React.useContext(GraphinContext);
  var graph = graphin.graph;
  var timer = useRef();

  var _React$useState = React.useState({
    visible: false,
    x: 0,
    y: 0,
    item: null
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  var handleShow = function handleShow(e) {
    e.preventDefault();
    e.stopPropagation();

    if (timer.current) {
      window.clearTimeout(timer.current);
    }

    var point = graph.getPointByClient(e.clientX, e.clientY);

    var _graph$getCanvasByPoi = graph.getCanvasByPoint(point.x, point.y),
        x = _graph$getCanvasByPoi.x,
        y = _graph$getCanvasByPoi.y;

    if (bindType === 'node') {
      // 如果是节点，则x，y指定到节点的中心点
      // eslint-disable-next-line no-underscore-dangle
      if (e.item) {
        var _e$item$getModel = e.item.getModel(),
            _e$item$getModel$x = _e$item$getModel.x,
            PointX = _e$item$getModel$x === void 0 ? 0 : _e$item$getModel$x,
            _e$item$getModel$y = _e$item$getModel.y,
            PointY = _e$item$getModel$y === void 0 ? 0 : _e$item$getModel$y;

        var CenterCanvas = graph.getCanvasByPoint(PointX, PointY);
        var daltX = e.canvasX - CenterCanvas.x;
        var daltY = e.canvasY - CenterCanvas.y;
        x = x - daltX;
        y = y - daltY;
      }
    }
    /** 设置变量 */


    setState(function (preState) {
      return Object.assign(Object.assign({}, preState), {
        visible: true,
        item: e.item,
        x: x,
        y: y
      });
    });
  };

  var handleClose = function handleClose() {
    if (timer.current) {
      window.clearTimeout(timer.current);
    }

    timer.current = window.setTimeout(function () {
      setState(function (preState) {
        return Object.assign(Object.assign({}, preState), {
          visible: false,
          item: null,
          x: 0,
          y: 0
        });
      });
    }, 200);
  };

  var handleDragStart = function handleDragStart() {
    setState(Object.assign(Object.assign({}, state), {
      visible: false,
      x: 0,
      y: 0,
      item: null
    }));
  };

  var handleDragEnd = function handleDragEnd(e) {
    var point = graph.getPointByClient(e.clientX, e.clientY);

    var _graph$getCanvasByPoi2 = graph.getCanvasByPoint(point.x, point.y),
        x = _graph$getCanvasByPoi2.x,
        y = _graph$getCanvasByPoi2.y;

    if (bindType === 'node') {
      // 如果是节点，则x，y指定到节点的中心点
      // eslint-disable-next-line no-underscore-dangle
      if (e.item) {
        var _e$item$getModel2 = e.item.getModel(),
            _e$item$getModel2$x = _e$item$getModel2.x,
            PointX = _e$item$getModel2$x === void 0 ? 0 : _e$item$getModel2$x,
            _e$item$getModel2$y = _e$item$getModel2.y,
            PointY = _e$item$getModel2$y === void 0 ? 0 : _e$item$getModel2$y;

        var CenterCanvas = graph.getCanvasByPoint(PointX, PointY);
        var daltX = e.canvasX - CenterCanvas.x;
        var daltY = e.canvasY - CenterCanvas.y;
        x = x - daltX;
        y = y - daltY;
      }

      setState(Object.assign(Object.assign({}, state), {
        visible: true,
        x: x,
        y: y,
        item: e.item
      }));
    }
  };

  var removeTimer = function removeTimer() {
    clearTimeout(timer.current);
  };

  useEffect(function () {
    var _a, _b;

    graph.on("".concat(bindType, ":mouseenter"), handleShow);
    graph.on("".concat(bindType, ":mouseleave"), handleClose);
    graph.on("afterremoveitem", handleClose);
    graph.on("node:dragstart", handleDragStart);
    graph.on("node:dragend", handleDragEnd); // graph.on(`${bindType}:mousemove`, handleUpdatePosition);

    (_a = container.current) === null || _a === void 0 ? void 0 : _a.addEventListener('mouseenter', removeTimer);
    (_b = container.current) === null || _b === void 0 ? void 0 : _b.addEventListener('mouseleave', handleClose);
    return function () {
      var _a, _b;

      console.log('effect..remove....');
      graph.off("".concat(bindType, ":mouseenter"), handleShow);
      graph.off("".concat(bindType, ":mouseleave"), handleClose);
      graph.off("afterremoveitem", handleClose);
      graph.off("node:dragstart", handleDragStart);
      graph.off("node:dragend", handleDragEnd);
      (_a = container.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseenter', removeTimer);
      (_b = container.current) === null || _b === void 0 ? void 0 : _b.removeEventListener('mouseleave', handleClose); // graph.off(`${bindType}:mousemove`, handleUpdatePosition);
    };
  }, []);
  return Object.assign({}, state);
};

export default useTooltip;