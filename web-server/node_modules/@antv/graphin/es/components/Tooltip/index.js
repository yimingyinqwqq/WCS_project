import React from 'react';
import getContainerStyles from './getContainerStyles';
import "./index.css";
import useTooltip from './useTooltip';
import { GraphinContext } from '../../index';
var defaultStyle = {
  width: '120px',
  boxShadow: '0 4px 12px rgb(0 0 0 / 15%)'
};
var container = /*#__PURE__*/React.createRef();

var Tooltip = function Tooltip(props) {
  var children = props.children,
      _props$bindType = props.bindType,
      bindType = _props$bindType === void 0 ? 'node' : _props$bindType,
      style = props.style,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'top' : _props$placement,
      hasArrow = props.hasArrow;

  var _useTooltip = useTooltip({
    bindType: bindType,
    container: container
  }),
      x = _useTooltip.x,
      y = _useTooltip.y,
      visible = _useTooltip.visible,
      item = _useTooltip.item;

  var _React$useContext = React.useContext(GraphinContext),
      graph = _React$useContext.graph;

  var nodeSize = 40;

  try {
    if (item) {
      var _item$getModel = item.getModel(),
          type = _item$getModel.type;

      if (type === 'graphin-cirle') {
        var _item$getModel2 = item.getModel(),
            _style = _item$getModel2.style;

        if (_style) {
          nodeSize = _style.keyshape.size;
        }
      }
    }
  } catch (error) {
    console.log(error);
  }

  var padding = 12;
  var containerPosition = getContainerStyles({
    graph: graph,
    placement: placement,
    nodeSize: nodeSize + padding,
    x: x,
    y: y,
    bindType: bindType,
    visible: visible
  });
  var positionStyle = Object.assign({
    position: 'absolute'
  }, containerPosition);

  if (typeof children !== 'function') {
    console.error('<Tooltip /> children should be a function');
    return null;
  }

  var model = item && !item.destroyed && item.getModel && item.getModel() || {};
  var id = model.id || '';
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    ref: container,
    className: "graphin-components-tooltip ".concat(placement),
    // @ts-ignore
    style: Object.assign(Object.assign(Object.assign({}, defaultStyle), positionStyle), style)
  }, visible && /*#__PURE__*/React.createElement("div", null, hasArrow && /*#__PURE__*/React.createElement("div", {
    className: "tooltip-arrow ".concat(placement)
  }), children({
    item: item,
    bindType: bindType,
    model: model,
    id: id
  }))));
};

export default Tooltip;