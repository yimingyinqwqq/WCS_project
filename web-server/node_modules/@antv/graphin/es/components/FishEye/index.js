/* eslint-disable no-undef */
import React from 'react';
import { G6, GraphinContext } from '../../index';
var defaultOptions = {
  r: 249,
  scaleRByWheel: true,
  minR: 100,
  maxR: 500,

  /**
   * @description 放大镜样式
   */
  delegateStyle: {
    stroke: '#000',
    strokeOpacity: 0.8,
    lineWidth: 2,
    fillOpacity: 0.1,
    fill: '#ccc'
  },
  showLabel: false
};

var FishEye = function FishEye(props) {
  var _React$useContext = React.useContext(GraphinContext),
      graph = _React$useContext.graph;

  var options = props.options,
      visible = props.visible,
      handleEscListener = props.handleEscListener;
  React.useEffect(function () {
    var FishEyeOptions = Object.assign(Object.assign({}, defaultOptions), options);

    if (FishEyeOptions.showLabel) {
      // 先将图上的label全部隐藏
      graph.getNodes().forEach(function (node) {
        node.getContainer().getChildren().forEach(function (shape) {
          if (shape.get('type') === 'text') shape.hide();
        });
      });
    }

    var fishEye = new G6.Fisheye(FishEyeOptions);

    var escListener = function escListener(e) {
      if (e.keyCode === 27) {
        if (handleEscListener) {
          handleEscListener();
          graph.get('canvas').setCursor('default');
        }
      }
    };

    if (visible) {
      graph.addPlugin(fishEye);
      graph.get('canvas').setCursor('zoom-in');
    }

    if (handleEscListener) {
      window.addEventListener('keydown', escListener);
    }

    return function () {
      if (graph && !graph.destroyed) {
        graph.get('canvas').setCursor('default');
        graph.removePlugin(fishEye);
      }

      if (handleEscListener) {
        window.removeEventListener('keydown', escListener);
      }
    };
  }, [graph, options, visible, handleEscListener]);
  return null;
};

export default FishEye;