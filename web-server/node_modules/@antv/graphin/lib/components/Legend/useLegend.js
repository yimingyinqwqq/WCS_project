"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _index = require("../../index");

var _utils = _interopRequireDefault(require("../../utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getEnumValue = _utils.default.getEnumValue,
    getEnumDataMap = _utils.default.getEnumDataMap;

var useLegend = function useLegend(_ref) {
  var _ref$bindType = _ref.bindType,
      bindType = _ref$bindType === void 0 ? 'node' : _ref$bindType,
      sortKey = _ref.sortKey;

  var graphin = _react.default.useContext(_index.GraphinContext);

  var graph = graphin.graph;
  var data = graph.save();
  /** 暂时不支持treeGraph的legend */

  if (data.children) {
    console.error('not support tree graph');
    return {
      dataMap: new Map(),
      options: {}
    };
  } // @ts-ignore


  var dataMap = getEnumDataMap(data["".concat(bindType, "s")], sortKey);
  /** 计算legend.content 的 options */

  var keys = _toConsumableArray(dataMap.keys());

  var options = keys.map(function (key) {
    var item = (dataMap.get(key) || [{}])[0];
    var graphinStyleColor = getEnumValue(item, 'style.keyshape.fill');
    var g6StyleCcolor = getEnumValue(item, 'style.color');
    var color = graphinStyleColor || g6StyleCcolor;
    return {
      /** 颜色 */
      color: color,

      /** 值 */
      value: key,

      /** 标签 */
      label: key,

      /** 是否选中 */
      checked: true
    };
  });
  return {
    dataMap: dataMap,
    options: options
  };
};

var _default = useLegend;
exports.default = _default;