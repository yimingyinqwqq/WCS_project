"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _GraphinContext = _interopRequireDefault(require("../../GraphinContext"));

var _util = require("@antv/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultHullCfg = {
  members: [],
  type: 'round-convex',
  nonMembers: [],
  style: {
    fill: 'lightblue',
    stroke: 'blue',
    opacity: 0.2
  },
  padding: 10
};
/**
 * deep merge hull config
 * @param defaultCfg
 * @param cfg
 */

var deepMergeCfg = function deepMergeCfg(defaultCfg, cfg) {
  var _defaultCfg$style = defaultCfg.style,
      DefaultCfg = _defaultCfg$style === void 0 ? {} : _defaultCfg$style,
      defaultOtherCfg = __rest(defaultCfg, ["style"]);

  var _cfg$style = cfg.style,
      style = _cfg$style === void 0 ? {} : _cfg$style,
      others = __rest(cfg, ["style"]);

  return Object.assign(Object.assign(Object.assign({}, defaultOtherCfg), others), {
    style: Object.assign(Object.assign({}, DefaultCfg), style)
  });
}; // eslint-disable-next-line @typescript-eslint/no-explicit-any


var hullInstances;

var Hull = function Hull(props) {
  var graphin = _react.default.useContext(_GraphinContext.default);

  var graph = graphin.graph;
  var options = props.options;

  _react.default.useEffect(function () {
    // 如果options有更改，先删除再创建
    if (hullInstances && hullInstances.length) {
      hullInstances.forEach(function (item) {
        return graph.removeHull(item);
      });
    }

    hullInstances = options.map(function (item) {
      return graph.createHull( // @ts-ignore
      deepMergeCfg(defaultHullCfg, Object.assign({
        id: "".concat(Math.random())
      }, item)));
    }); // afterupdateitem会触发多次，所以使用debounce包裹一下

    var handleAfterUpdateItem = (0, _util.debounce)(function () {
      hullInstances.forEach(function (item, index) {
        // Graphin的数据更新后，这里存储的instance.group已经被销毁了
        // 直接调用updateData会报错
        if (item.group.destroyed) {
          // @ts-ignore
          hullInstances[index] = graph.createHull( // @ts-ignore
          deepMergeCfg(defaultHullCfg, Object.assign({
            id: "".concat(Math.random())
          }, options[index])));
        } else {
          item.updateData(item.members);
        }
      });
    });
    graph.on('afterupdateitem', handleAfterUpdateItem);
    graph.on('aftergraphrefreshposition', handleAfterUpdateItem);
    return function () {
      graph.off('afterupdateitem', handleAfterUpdateItem);
      graph.off('aftergraphrefreshposition', handleAfterUpdateItem);
    };
  }, [graph, options]);

  return null;
};

var _default = Hull;
exports.default = _default;