"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEnumValue = exports.getEnumDataMap = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * 根据key取对象的值
 * @param obj 对象
 * @param keyString 对象字段,支持多层,例如data.property.key
 * @returns
 */
var getEnumValue = function getEnumValue(obj, keyString) {
  var keyArray = keyString.split('.');
  var enumValue = keyArray.reduce(function (acc, curr, currIndex, array) {
    var currValue = acc[curr];

    if (!currValue && currIndex !== array.length - 1) {
      return {};
    }

    return currValue;
  }, obj);
  return enumValue;
};
/**
 * 根据字段分类，得到分类后的枚举值Map
 * @param data nodes or edges
 * @param sortKey 分类的字段，例如 nodeType 或者 data.type
 * @returns
 */


exports.getEnumValue = getEnumValue;

var getEnumDataMap = function getEnumDataMap(data, sortKey) {
  var enumDataMap = new Map();
  data.forEach(function (item) {
    /** 得到枚举值 */
    var enumValue = getEnumValue(item, sortKey);
    /** 按照枚举值重新将节点存放 */

    var current = enumDataMap.get(enumValue);

    if (current) {
      enumDataMap.set(enumValue, [].concat(_toConsumableArray(current), [item]));
    } else {
      enumDataMap.set(enumValue, [item]);
    }
  });
  return enumDataMap;
};

exports.getEnumDataMap = getEnumDataMap;